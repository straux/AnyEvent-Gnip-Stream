=encoding utf-8

=head1 NAME

AnyEvent::Gnip::Stream - Receive Gnip Power Track streaming API in an event loop

=head1 SYNOPSIS

    use AnyEvent::Gnip::Stream;

    # receive updates from Gnip Power Track
    my $done = AE::cv;
    my $listener = AnyEvent::Gnip::Stream->new(
        username      => $user,
        password      => $password,
        gnip_box_name => $gnip_box_name,
        collector_id  => $collector_id,
        on_tweet      => sub {
            my $tweet = shift;
            print $tweet->{actor}->{preferredUsername}.": ".$tweet->{body}."\n";
        },
        on_error      => sub {
            warn shift."\n";
            $done->send;
        },
        on_connect    => sub {
            print "Stream started!\n";
        },
        on_eof        => sub {
            warn "EOF\n";
            $done->send;
        },
        on_keepalive => sub {
          warn "ping\n";
        },
        timeout => 60,
    );
    $done->recv;

=head1 DESCRIPTION

AnyEvent::Gnip::Stream is an AnyEvent user to receive Gnip Power Track streaming
API, available at L<http://docs.gnip.com/w/page/35663947/Power-Track> and
L<http://docs.gnip.com/w/page/37218164/Getting%20Started%20with%20Commercial%20Twitter%20Data>.

See L<eg/track.pl> for more client code example.

=head1 METHODS

=head2 my $streamer = AnyEvent::Gnip::Stream->new(%args);

=over 4

=item B<username> B<password>

These arguments are used for basic authentication.

=item B<gnip_box_name> B<collector_id>

These arguments are used to define the Gnip collector to link to.

=item B<timeout>

Set the timeout value.

=item B<on_connect>

Callback to execute when a stream is connected.

=item B<on_tweet>

Callback to execute when a new tweet is received.

=item B<on_error>

Callback to execute when an error occurs.

=item B<on_eof>

=item B<on_keepalive>

=item B<no_decode_json>

Set this param to TRUE if you don't want to deserialize json input from the stream.

=back

=head1 NOTES

The API uses the HTTPS protocol. For this, you need to install the L<Net::SSLeay> module.

=head1 AUTHOR

St√©phane Raux E<lt>stephane.raux@linkfluence.netE<gt>

(Based on Tatsuhiko Miyagawa's L<AnyEvent::Twitter::Stream>)

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO

L<AnyEvent::Twitter::Stream>

=cut

